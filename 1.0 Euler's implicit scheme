import numpy as np
import matplotlib.pyplot as plt

# НЕЯВНАЯ СХЕМА ЭЙЛЕРА

h_val = np.arange(0.001, 10, 0.001).round(3)
N = len(h_val)

h0 = 0.75

c = 2
c0 = 1 / (c ** 2)

max_err = []

for h in h_val:
    # начальное условие
    t = 0
    x = c

    t1 = 10
    t_i = np.arange(t, t1, h).round(3)

    t_val = []
    x_val = []


    # root = (x / (2 * h * (t + (t ** 2) / 2 + (t ** 3) / 6)) + (1 / (27 * (h ** 3) * (t + (t ** 2) / 2 + (t ** 3) / 6) ** 3) + (x ** 2) / (4 * (h ** 2) * (t + (t ** 2) / 2 + (t ** 3) / 6) ** 2)) ** 1./2.) ** (1./3.) +
    #        (x / (2 * h * (t + (t ** 2) / 2 + (t ** 3) / 6)) - (1 / (27 * (h ** 3) * (t + (t ** 2) / 2 + (t ** 3) / 6) ** 3) + (x ** 2) / (4 * (h ** 2) * (t + (t ** 2) / 2 + (t ** 3) / 6) ** 2)) ** 1./2.) ** (1./3.)

    # root = (c / (2 * h * (t + (t ** 2) / 2 + (t ** 3) / 6)) + (1 / (27 * (h ** 3) * (t + (t ** 2) / 2 + (t ** 3) / 6) ** 3) + (c ** 2) / (4 * (h ** 2) * (t + (t ** 2) / 2 + (t ** 3) / 6) ** 2)) ** 1./2.) ** (1./3.) + (c / (2 * h * (t + (t ** 2) / 2 + (t ** 3) / 6)) - (1 / (27 * (h ** 3) * (t + (t ** 2) / 2 + (t ** 3) / 6) ** 3) + (c ** 2) / (4 * (h ** 2) * (t + (t ** 2) / 2 + (t ** 3) / 6) ** 2)) ** 1./2.) ** (1./3.)

    # root = (x / (2 * h * (t + (t ** 2) / 2 + (t ** 3) / 6)) + (1 / (27 * (h ** 3) * (t + (t ** 2) / 2 + (t ** 3) / 6) ** 3) + (x ** 2) / (4 * (h ** 2) * (t + (t ** 2) / 2 + (t ** 3) / 6) ** 2)) ** 1./2.) ** (1./3.) + (x / (2 * h * (t + (t ** 2) / 2 + (t ** 3) / 6)) - (1 / (27 * (h ** 3) * (t + (t ** 2) / 2 + (t ** 3) / 6) ** 3) + (x ** 2) / (4 * (h ** 2) * (t + (t ** 2) / 2 + (t ** 3) / 6) ** 2)) ** 1./2.) ** (1./3.)


    for i, t in enumerate(t_i):
        t_val.append(t)
        x_val.append(x)

        t += h

        A = h * (-t - (t ** 2) / 2 - (t ** 3) / 6)
        B = 0
        C = -1
        D = x

        p = C / A - (B ** 2) / (3 * (A ** 2))
        q = 2 * (B ** 3) / (27 * (A ** 3)) - (B * C) / (3 * (A ** 2)) + D / A

        Q = (p / 3) ** 3 + (q / 2) ** 2


        R_1 = - q / 2 + np.sqrt(Q)
        root_1 = np.cbrt(R_1)
        R_2 = - q / 2 - np.sqrt(Q)
        root_2 = np.cbrt(R_2)
        root = root_1 + root_2
        # print(f'x_i+1({i}) = {root}')


        x = root
        # print(f't = {t_val[i]}, x = {x_val[i]}')

    t_val = np.array(t_val)
    x_val = np.array(x_val)


    x_analitical = np.array([(1 / ((t_i ** 2)+(t_i ** 3) / 3 + (t_i ** 4) / 12 + c0)) ** (1./2.) for t_i in t_i])
    x_err = np.array([x_analitical - x_val for t, x_analitical, x_val in zip(t_i, x_analitical, x_val)])

    max_x_err = np.max(np.abs(x_err))
    max_err.append(max_x_err)

    if h == h0:
        plt.figure(figsize=(12, 12))
        plt.rc('font', size=16)
        plt.subplot(3, 1, 1)
        plt.plot(t_i, x_analitical, label='Аналитическое решение')
        plt.plot(t_i, x_val, label=f'Численное решение, h = {h}')
        plt.xlabel('t')
        plt.ylabel('x')
        plt.legend()
        plt.grid(True)
        plt.title('Зависимость x(t)')

        plt.subplot(3, 1, 2)
        plt.plot(t_i, x_err)
        plt.xlabel('t')
        plt.ylabel('Ошибка')
        plt.grid(True)
        plt.title('Зависимость ошибки от координаты')

    del t_i
    del t_val
    del x_val

# plt.figure(figsize=(12, 12))
# plt.subplot(2, 1, 1)
# plt.plot(t_i, x_analitical, label='Аналитическое решение')
# plt.plot(t_i, x_val, label='Численное решение, h = 0.01')
# plt.xlabel('t')
# plt.ylim(0, 2.5)
# plt.ylabel('x')
# plt.legend()
# plt.grid(True)
# plt.title('Зависимость x(t)')
#
# plt.subplot(2, 1, 2)
# plt.plot(t_i, x_err, label='Отклониение')
# plt.xlabel('t')
# plt.ylabel('Ошибка')
# plt.legend()
# plt.grid(True)
# plt.title('Зависимость ошибки от координаты')

# max_err_log = np.exp(max_err)

plt.subplot(3, 1, 3)
plt.plot(h_val, max_err)
# plt.yscale('log')
plt.grid(which='both', axis='both')
plt.xlabel('h')
plt.ylabel('Ошибка')
plt.grid(True)
plt.title('Зависимость ошибки от шага')


plt.tight_layout()
plt.show()

